<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".g.cs" #>
using CppSharp.Types;
using JetBrains.Annotations;

namespace im.NET.Generator.TypeMaps;
<#+
	public void Generate(string path, string @namespace)
	{
		var types = File.ReadAllLines(path);

		foreach (var type in types)
		{
			if (Regex.IsMatch(type, @"^\s*(?:\/\/|$)"))
			{
				continue; // empty line or comment
			}

			const string prefix = "TypeMapEnum";
			
			WriteLine("[UsedImplicitly]");

			var split = type.Split(';');

			var value = split[0];
			
			if (string.IsNullOrWhiteSpace(value))
			{
				throw new InvalidOperationException("Type name cannot be null, empty, or white space.");
			}
			
			foreach (var alias in split)
			{
				WriteLine($"[TypeMap(\"{alias}\")]");
			}

			WriteLine($"[TypeMapEnumNamespace(\"{@namespace}\")]");

			WriteLine($"internal sealed class {prefix}{value} : {prefix} {{}}");

			WriteLine(string.Empty);
		}
	}
#>